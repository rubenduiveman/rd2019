$themes: (
	light: (
		neutral-0: #fff,
		neutral-100: #f2f2f2,
		neutral-500: #999,
		neutral-900: #212121,
		primary-500: #ea6645,
		accent-500: #45afea,
		accented-text: #fff,
		accented-bg: #ea6645,
		bold-text: #111111,
		t-neutral-100: rgba(0, 0, 0, 0.05),
		t-neutral-500: rgba(0, 0, 0, 0.5)
	),
	dark: (
		neutral-0: #000,
		neutral-100: #212121,
		neutral-500: #454545,
		neutral-900: #afafaf,
		primary-500: #ea6645,
		accent-500: #45afea,
		accented-text: rgba(255, 255, 255, 0.8),
		accented-bg: #bb5237,
		bold-text: #d2d2d2,
		t-neutral-100: rgba(255, 255, 255, 0.05),
		t-neutral-500: rgba(255, 255, 255, 0.3)
	)
);

/// Themify mixin
/// @access private
/// @author Hugo Giraudel
/// @param {String} $property - Property to themify
/// @param {String} $key - Key color to use from theme
/// @param {Map} $themes [$themes] - Map of themes to use
@mixin themify($property, $key, $themes: $themes) {
	// Iterate over the themes
	@each $theme, $colors in $themes {
		// Create a selector (e.g. `.media.theme-unicorn, .theme-unicorn .media`)
		.theme-#{$theme} & {
			// Output the declaration
			#{$property}: map-get($colors, $key);
		}
	}
}

@mixin themify-self-multi($property, $key1, $key2, $themes: $themes) {
	// Iterate over the themes
	@each $theme, $colors in $themes {
		// Create a selector (e.g. `.media.theme-unicorn, .theme-unicorn .media`)
		&.theme-#{$theme} {
			// Output the declaration
			#{$property}: map-get($colors, $key1) map-get($colors, $key2);
		}
	}
}

@mixin themify-self($property, $key, $themes: $themes) {
	// Iterate over the themes
	@each $theme, $colors in $themes {
		&.theme-#{$theme} {
			// Output the declaration
			#{$property}: map-get($colors, $key);
		}
	}
}

@mixin themify-self-after($self, $after, $property, $key, $themes: $themes) {
	// Iterate over the themes
	@each $theme, $colors in $themes {
		#{$self}.theme-#{$theme}#{$after} {
			// Output the declaration
			#{$property}: map-get($colors, $key);
		}
	}
}

@mixin themify-nested($parent, $property, $key, $themes: $themes) {
	// Iterate over the themes
	@each $theme, $colors in $themes {
		#{$parent}.theme-#{$theme} & {
			// Output the declaration
			#{$property}: map-get($colors, $key);
		}
	}
}

@mixin themify-bg-line($from, $to, $key, $themes: $themes) {
	@each $theme, $colors in $themes {
		.theme-#{$theme} & {
			$color: map-get($colors, $key);
			background: linear-gradient(
				to right,
				rgba(0, 0, 0, 0) #{$from},
				$color #{$from},
				$color #{$to},
				rgba(0, 0, 0, 0) #{$to}
			);
			background-repeat: no-repeat;
		}
	}
}

/// Shorthand to themify color through `themify` mixin
/// @access public
/// @see {mixin} themify
@mixin color($arguments...) {
	@include themify("color", $arguments...);
}

/// Shorthand to themify border-color through `themify` mixin
/// @access public
/// @see {mixin} themify
@mixin border-color($arguments...) {
	@include themify("border-color", $arguments...);
}

/// Shorthand to themify background-color through `themify` mixin
/// @access public
/// @see {mixin} themify
@mixin background-color($arguments...) {
	@include themify("background-color", $arguments...);
}
